from pandas import DataFrame
from . import CONFIG, token_size, relevancy_score, get_time, proxy_request
from tqdm import tqdm

DIM: int = CONFIG["EMBED"]["DIM"]
EMBED_MODEL = CONFIG["EMBED"]["MODEL"]


def get_embedding(in_str: str) -> list[float]:
    # return client.embeddings.create(input=in_str, model=EMBED_MODEL).data[0].embedding
    return proxy_request("embed", {"input": in_str, "model": EMBED_MODEL, "dim": DIM})[
        "embedding"
    ]


def sort_relevancy(qe: list[float], df: DataFrame) -> DataFrame:
    df["cosineDist"] = df["embedding"].apply(lambda x: relevancy_score(x, qe))
    return df.sort_values(by="cosineDist")


def generate(df: DataFrame, col_id: str = "data", filename: str = "") -> DataFrame:
    """
    Receive database with input data, add column containing embeddings.

    Input:
    - input_path: DataFrame (Pandas DataFrame containing data)
        - columns: [_, Data]

    Output:
    - DataFrame: [_, Data*, Embedding*]
        - Data: Processed to remove redundant whitespace (process_input)
        - Embedding: Embeddings for data generated by embedding model
    """
    token_list = []
    embed_list = []
    df["embedTime"] = get_time()
    for _, row in tqdm(
        df.iterrows(),
        total=len(df),
        desc="Generating embeddings" + (f" [{filename}]" if filename else ""),
    ):
        token_list += [token_size(row[col_id])]
        embed_list += [get_embedding(row[col_id])]
    df["token"] = token_list
    df["embedding"] = embed_list
    return df
